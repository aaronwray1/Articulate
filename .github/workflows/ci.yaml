name: CI/CD

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" ./tests
      - uses: actions/upload-artifact@v2
        with:
          name: upload-test-coverage
          path: ./tests/TestResults/**/coverage.cobertura.xml

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: download-test-coverage
        uses: actions/download-artifact@v2
        with:
          name: upload-test-coverage
      - uses: 5monkeys/cobertura-action@master
        with:
          path: coverage.cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 10
          skip_covered_false: false
          show_branch: true
          show_class_names: true

  ansible:
    runs-on: ubuntu-latest
      needs: terraform
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Install Ansible
          run: | 
            sudo apt-get install  -y ansible
        - name: Run Playbook
          run: | 
            ansible-playbook ./ansible/playbook.yml -i ./ansible/inventory.yaml

  terraform:
    needs: coverage
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan
      
      - name: Terraform Apply
        run: terraform apply -auto-approve

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Articulate App Build/Push Image
        uses: docker/build-push-action@v2
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/articulate-app:latest
      - name: Articulate Build/Push Image
        uses: docker/build-push-action@v2
        with:
          context: ./articulate
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/articulate:latest
      - name: Categories Build/Push Image
        run: |
          docker build -f ./categories/dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/categories:latest ./categories
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/categories:latest
      - name: Numbers Build/Push Image
        uses: docker/build-push-action@v2
        with:
          context: ./numbers
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/numbers:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-and-push, terraform]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Docker Compose Installation
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
    - name: Change Docker Context
      run: | 
        docker context create my-context --docker "host=ssh://azureuser@articulateawray.eastus.cloudapp.azure.com"
        docker context use my-context
    - name: Test SSH
      run: | 
        ssh -o StrictHostKeyChecking=no azureuser@articulateawray.eastus.cloudapp.azure.com echo "Hello! World!"
    - name: Deploy Containers
      run: | 
        docker-compose --env-file ./config/.prod.env pull
        docker-compose --env-file ./config/.prod.env up -d